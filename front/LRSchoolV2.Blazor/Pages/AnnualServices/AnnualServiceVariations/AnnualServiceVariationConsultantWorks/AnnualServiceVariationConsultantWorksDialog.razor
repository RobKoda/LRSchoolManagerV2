@using Unit = LanguageExt.Unit
@using LRSchoolV2.Blazor.Pages.AnnualServices.AnnualServiceVariations.AnnualServiceVariationConsultantWorks.SaveAnnualServiceVariationConsultantWork
@using LRSchoolV2.Domain.AnnualServices
@inject IDialogService DialogService
@inject ISnackbar Snackbar
@inject AnnualServiceVariationConsultantWorksService AnnualServiceVariationConsultantWorksService

@if (AnnualServiceVariation != null)
{
    <MudDialog>
        <DialogContent>
            <MudGrid Class="mb-4">
                <MudItem xs="4">
                    <MudButton Class="mb-2" StartIcon="@Icons.Material.Filled.Add" OnClick="@OnAddServiceVariationConsultantWorkClick" Variant="Variant.Filled" Color="Color.Primary">Ajouter</MudButton>
                </MudItem>
                <MudItem xs="8">
                    <MudSwitch @bind-Value="ShowOldRecords" Color="Color.Primary">Afficher les autres années</MudSwitch>
                </MudItem>
            </MudGrid>

            <MudDataGrid T="AnnualServiceVariationConsultantWork" Items="DisplayedConsultantWorks" SelectOnRowClick="true" Hover="true" Style="user-select: none;" SortMode="SortMode.None" RowStyleFunc="GreyOutOldRecords">
                <Columns>
                    <HierarchyColumn T="AnnualServiceVariationConsultantWork" />
                    <PropertyColumn T="AnnualServiceVariationConsultantWork" TProperty="string" Property="inServiceVariationConsultantWork => inServiceVariationConsultantWork.SchoolYear.GetPeriodDisplay()" Title="Période"/>
                    <PropertyColumn T="AnnualServiceVariationConsultantWork" TProperty="string" Property="inServiceVariationConsultantWork => inServiceVariationConsultantWork.Consultant.GetFullName()" Title="Intervenant"/>
                    <PropertyColumn T="AnnualServiceVariationConsultantWork" TProperty="decimal" Property="inServiceVariationConsultantWork => inServiceVariationConsultantWork.IndividualWorkHours" Title="Heures individuelles"/>
                    <TemplateColumn>
                        <CellTemplate>
                            <MudStack Row>
                                <MudTooltip Text="Édition">
                                    <MudIconButton Variant="Variant.Filled" Color="Color.Primary" Icon="@Icons.Material.Filled.Edit" OnClick="@(() => OnServiceVariationConsultantWorkEditClick(context.Item!))" Size="Size.Small"/>
                                </MudTooltip>
                                <MudTooltip Text="Suppression">
                                    <MudIconButton Variant="Variant.Filled" Color="Color.Primary" Icon="@Icons.Material.Filled.Delete" OnClick="@(() => OnServiceVariationConsultantWorkDeleteClick(context.Item!))" Size="Size.Small"/>
                                </MudTooltip>
                            </MudStack>
                        </CellTemplate>
                    </TemplateColumn>
                </Columns>
                <ChildRowContent>
                    <pre><MudText>@context.Item.IndividualWorkHoursComment</MudText></pre>
                </ChildRowContent>
            </MudDataGrid>
        </DialogContent>
        <DialogActions>
            <MudButton OnClick="@Cancel">Retour</MudButton>
        </DialogActions>
    </MudDialog>
}

@code {
    [CascadingParameter]
    private MudDialogInstance MudDialog { get; set; } = null!;

    [Parameter]
    public AnnualServiceVariation? AnnualServiceVariation { get; set; }

    private ObservableCollection<AnnualServiceVariationConsultantWork> ConsultantWorks { get; set; } = [];

    private bool ShowOldRecords { get; set; }
    private IEnumerable<AnnualServiceVariationConsultantWork> DisplayedConsultantWorks => ConsultantWorks.Where(inConsultantWork => ShowOldRecords || inConsultantWork.SchoolYear.IsCurrentPeriod());

    protected override async Task OnParametersSetAsync()
    {
        await base.OnParametersSetAsync();
        await ReloadDataAsync();
    }

    private async Task ReloadDataAsync()
    {
        var result = await AnnualServiceVariationConsultantWorksService.GetAnnualServiceVariationConsultantWorksPerAnnualServiceAsync(AnnualServiceVariation!.Id);
        result.Match(inSuccess => ConsultantWorks = new ObservableCollection<AnnualServiceVariationConsultantWork>(inSuccess
            .OrderByDescending(inServiceVariationConsultantWork => inServiceVariationConsultantWork.SchoolYear.StartDate)
            .ThenBy(inServiceVariationConsultantWork => inServiceVariationConsultantWork.Consultant.LastName)
            .ThenBy(inServiceVariationConsultantWork => inServiceVariationConsultantWork.Consultant.FirstName)),
            inFailure => Snackbar.Add(inFailure.First(), Severity.Error));
    }

    private void Cancel() => MudDialog.Cancel();

    private async Task OnAddServiceVariationConsultantWorkClick()
    {
        var theParameters = new DialogParameters
        {
            {
                nameof(SaveServiceVariationConsultantWorkDialog.Model), new SaveServiceVariationConsultantWorkFormModel
                {
                    AnnualServiceVariationId = AnnualServiceVariation!.Id
                }
            }
        };
        var dialog = await DialogService.ShowAsync<SaveServiceVariationConsultantWorkDialog>("Ajout d'un horaire d'intervenant", theParameters, new DialogOptions
        {
            CloseOnEscapeKey = true,
            BackdropClick = false
        });
        var dialogResult = await dialog.Result;
        if (!dialogResult.Canceled)
        {
            await ReloadDataAsync();
        }
    }

    private async Task OnServiceVariationConsultantWorkEditClick(AnnualServiceVariationConsultantWork inAnnualServiceVariationConsultantWork)
    {
        var theParameters = new DialogParameters
        {
            { nameof(SaveServiceVariationConsultantWorkDialog.Model), inAnnualServiceVariationConsultantWork.Adapt<SaveServiceVariationConsultantWorkFormModel>() }
        };
        var theDialog = await DialogService.ShowAsync<SaveServiceVariationConsultantWorkDialog>("Edition d'un horaire d'intervenant", theParameters, new DialogOptions
        {
            CloseOnEscapeKey = true, 
            BackdropClick = false,
            CloseButton = true,
            FullWidth = true
        });
        var theDialogResult = await theDialog.Result;
        if (theDialogResult is { Canceled: false })
        {
            await ReloadDataAsync();
        }
    }

    private async Task OnServiceVariationConsultantWorkDeleteClick(AnnualServiceVariationConsultantWork inAnnualServiceVariationConsultantWork)
    {
        var theDialog = await DialogService.Confirm("Êtes-vous sur de vouloir supprimer le prix annuel ?", "Supprimer un prix annuel", "Annuler", "Supprimer");
        var theDialogResult = await theDialog.Result;
        if (theDialogResult is { Canceled: false })
        {
            var result = await AnnualServiceVariationConsultantWorksService.DeleteAnnualServiceVariationConsultantWorkAsync(inAnnualServiceVariationConsultantWork);
            await result.MatchAsync(async inSuccess =>
            {
                await ReloadDataAsync();
                return inSuccess;
            },
                inFailure =>
                {
                    Snackbar.Add(inFailure.First(), Severity.Error);
                    return Unit.Default;
                }
                );
        }
    }

    private static string GreyOutOldRecords(AnnualServiceVariationConsultantWork inConsultantWork, int inIndex) =>
        inConsultantWork.SchoolYear.IsCurrentPeriod() ? string.Empty : $"background-color: {Colors.Gray.Lighten3}";

}