@using LRSchoolV2.Domain.AnnualServices
@inject AnnualServiceVariationsService AnnualServiceVariationsService
@inject ISnackbar Snackbar

@if (Model != null)
{
    <EditForm Model="Model" OnValidSubmit="Submit">
    <DataAnnotationsValidator />
        <MudDialog>
            <DialogContent>
                <MudGrid>
                    <MudItem xs="12">
                        <MudTextField Label="Nom" @bind-Value="Model.Name" For="@(() => Model.Name)"/>
                    </MudItem>
                    <MudItem xs="12">
                        <MudTextField Label="Nom sur la facture" @bind-Value="Model.InvoiceName" For="@(() => Model.InvoiceName)"/>
                    </MudItem>
                </MudGrid>
            </DialogContent>
            <DialogActions>
                <MudButton OnClick="@Cancel">Annuler</MudButton>
                <MudButton Color="Color.Primary" ButtonType="ButtonType.Submit">Ok</MudButton>
            </DialogActions>
        </MudDialog>
    </EditForm>
}

@code {

    [CascadingParameter]
    private MudDialogInstance MudDialog { get; set; } = null!;

    [Parameter]
    public SaveAnnualServiceVariationFormModel? Model { get; set; }

    protected override async Task OnParametersSetAsync()
    {
        await base.OnParametersSetAsync();
        Model ??= new SaveAnnualServiceVariationFormModel();
    }

    private async Task Submit()
    {
        var result = await AnnualServiceVariationsService.SaveAnnualServiceVariationAsync(Model.Adapt<AnnualServiceVariation>());
        result.Match(
            _ => MudDialog.Close(DialogResult.Ok(true)),
            inFailure => Snackbar.Add(inFailure.First(), Severity.Error));
    }

    private void Cancel() => MudDialog.Cancel();
}

