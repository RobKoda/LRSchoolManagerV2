@page "/CustomerInvoices/Generation"

@using LRSchoolV2.Domain.CustomerInvoices

@inject CustomerInvoiceablesService CustomerInvoiceablesService
@inject CustomerInvoicesService CustomerInvoicesService
@inject ISnackbar Snackbar 
@inject NavigationManager NavigationManager 

@if (CustomerInvoiceables != null)
{
    <MudContainer class="pt-2 mx-1" MaxWidth="MaxWidth.False">
        <MudButton StartIcon="@Icons.Material.Filled.NoteAdd" OnClick="@OnInvoicesGenerate" Variant="Variant.Filled" Color="Color.Primary">Générer</MudButton>

        <MudPaper Class="mt-4">
            <MudDataGrid T="CustomerInvoiceableFormModel" Items="CustomerInvoiceables" Hover="true" Style="user-select: none;" SortMode="SortMode.Single" MultiSelection="true" SelectOnRowClick="false" @bind-SelectedItems="SelectedCustomerInvoiceables" Dense="true" Bordered="true">
            <ToolBarContent>
                <MudText Typo="Typo.h6">À générer</MudText>
            </ToolBarContent>
                <Columns>
                    <SelectColumn T="CustomerInvoiceableFormModel" ShowInFooter="false" Size="Size.Small"/>
                    <PropertyColumn T="CustomerInvoiceableFormModel" TProperty="string" Property="inCustomerInvoiceable => inCustomerInvoiceable.Person.GetFullName()" Title="Facturé à"/>
                    <PropertyColumn T="CustomerInvoiceableFormModel" TProperty="string" Property="inCustomerInvoiceable => inCustomerInvoiceable.Denomination" Title="Description"/>
                    <PropertyColumn T="CustomerInvoiceableFormModel" TProperty="decimal" Property="inCustomerInvoiceable => inCustomerInvoiceable.Price" Title="Prix" Format="0.00" CellStyle="text-align: right; max-width: 150px" HeaderStyle="max-width: 150px"/>
                    <PropertyColumn T="CustomerInvoiceableFormModel" TProperty="decimal" Property="inCustomerInvoiceable => inCustomerInvoiceable.AlreadyBilled" Title="Déjà facturé" Format="0.00" CellStyle="text-align: right; max-width: 150px" HeaderStyle="max-width: 150px"/>
                    <PropertyColumn T="CustomerInvoiceableFormModel" TProperty="decimal" Property="inCustomerInvoiceable => inCustomerInvoiceable.GetLeftToBill()" Title="Reste à facturer" Format="0.00" CellStyle="text-align: right; max-width: 150px" HeaderStyle="max-width: 150px"/>
                    <PropertyColumn T="CustomerInvoiceableFormModel" TProperty="int" Property="inCustomerInvoiceable => inCustomerInvoiceable.BilledPaymentsCount" Title="Paiements effectués" CellStyle="text-align: right; max-width: 150px" HeaderStyle="max-width: 150px"/>
                    <PropertyColumn T="CustomerInvoiceableFormModel" TProperty="int" Property="inCustomerInvoiceable => inCustomerInvoiceable.PaymentsCount" Title="Nombre total paiements" CellStyle="text-align: right; max-width: 150px" HeaderStyle="max-width: 150px"/>
                    <TemplateColumn T="CustomerInvoiceableFormModel" Title="Compléter le paiement total">
                        <CellTemplate>
                            @if (context.Item.PaymentsCount > 1)
                            {
                                <MudCheckBox @bind-Value="@context.Item.CompletePayment"/>
                            }
                        </CellTemplate>
                    </TemplateColumn>
                </Columns>
            </MudDataGrid>
        </MudPaper>
    </MudContainer>
}
@if (_isLoading)
{
    <LoadingSpinner/>
}

@code {
    private ObservableCollection<CustomerInvoiceableFormModel>? CustomerInvoiceables { get; set; }

    private HashSet<CustomerInvoiceableFormModel> SelectedCustomerInvoiceables { get; set; } = [];

    private bool _isLoading;

    protected override async Task OnParametersSetAsync()
    {
        await base.OnParametersSetAsync();
        await ReloadDataAsync();
    }

    private async Task ReloadDataAsync()
    {
        CustomerInvoiceables = new ObservableCollection<CustomerInvoiceableFormModel>(
            (await CustomerInvoiceablesService.GetCustomerInvoiceablesAsync())
                .OrderBy(inCustomerInvoiceable => inCustomerInvoiceable.Person.GetFullName())
                .ThenBy(inCustomerInvoiceable => inCustomerInvoiceable.Denomination)
                .Adapt<IEnumerable<CustomerInvoiceableFormModel>>()
            );
    }

    private async Task OnInvoicesGenerate()
    {
        _isLoading = true;
        var result = await CustomerInvoicesService.GenerateCustomerInvoicesAsync(SelectedCustomerInvoiceables.Adapt<IEnumerable<CustomerInvoiceable>>());
        result.Match(_ => { NavigationManager.NavigateTo("/CustomerInvoices"); },
            inFailure => { Snackbar.Add(string.Join("<br/>", inFailure), Severity.Error); });
        _isLoading = false;
    }

}