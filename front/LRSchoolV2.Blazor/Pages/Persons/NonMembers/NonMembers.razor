@page "/NonMembers"
@using LRSchoolV2.Blazor.Pages.Persons.Members.PersonServiceVariations
@using Unit = LanguageExt.Unit
@using LRSchoolV2.Blazor.Pages.Persons.NonMembers.SaveNonMember
@using LRSchoolV2.Blazor.Pages.Persons.PersonRegistrations
@using LRSchoolV2.Domain.Persons
@inject IDialogService DialogService
@inject ISnackbar Snackbar
@inject PersonsService PersonsService

<MudContainer class="pt-2 mx-1" MaxWidth="MaxWidth.False">
    <MudButton StartIcon="@Icons.Material.Filled.Add" OnClick="@OnAddPersonClick" Variant="Variant.Filled" Color="Color.Primary">Ajouter</MudButton>
    <MudPaper Class="mt-4">
        <MudDataGrid T="Person" Items="DisplayedPersons" SelectOnRowClick="true" Hover="true" Style="user-select: none;" SortMode="SortMode.None" Dense="true" QuickFilter="@SearchFilter">
            <ToolBarContent>
                <MudText Typo="Typo.h6">Non adhérents</MudText>
                <MudSpacer/>
                <MudTextField T="string" @bind-Value="_searchString" Placeholder="Recherche" Adornment="Adornment.Start" Immediate="true"
                              AdornmentIcon="@Icons.Material.Filled.Search" IconSize="Size.Medium" Class="mt-0"/>
            </ToolBarContent>
            <Columns>
                <PropertyColumn T="Person" TProperty="string" Property="inPerson => inPerson.LastName" Title="Nom"/>
                <PropertyColumn T="Person" TProperty="string" Property="inPerson => inPerson.FirstName" Title="Prénom"/>
                <PropertyColumn T="Person" TProperty="DateTime?" Property="inPerson => inPerson.BirthDate" Title="Date de naissance"/>
                <PropertyColumn T="Person" TProperty="string" Property="inPerson => inPerson.PhoneNumber" Title="Téléphone"/>
                <PropertyColumn T="Person" TProperty="string" Property="inPerson => inPerson.Email" Title="Email"/>
                <PropertyColumn T="Person" TProperty="string" Property="inPerson => inPerson.Address.GetAddressFullDisplay()" Title="Adresse"/>
                <TemplateColumn>
                    <CellTemplate>
                        <MudStack Row>
                            <MudTooltip Text="Services">
                                <MudIconButton Variant="Variant.Filled" Color="Color.Primary" Icon="@Icons.Material.Filled.Piano" OnClick="@(() => OnPersonServiceVariationsClick(context.Item!))" Size="Size.Small"/>
                            </MudTooltip>
                            <MudTooltip Text="Adhésions">
                                <MudIconButton Variant="Variant.Filled" Color="Color.Primary" Icon="@Icons.Material.Filled.Login" OnClick="@(() => OnPersonRegistrationsClick(context.Item!))" Size="Size.Small"/>
                            </MudTooltip>
                            <MudTooltip Text="Édition">
                                <MudIconButton Variant="Variant.Filled" Color="Color.Primary" Icon="@Icons.Material.Filled.Edit" OnClick="@(() => OnPersonEditClick(context.Item!))" Size="Size.Small"/>
                            </MudTooltip>
                            <MudTooltip Text="Suppression">
                                <MudIconButton Variant="Variant.Filled" Color="Color.Primary" Icon="@Icons.Material.Filled.Delete" OnClick="@(() => OnPersonDeleteClick(context.Item!))" Size="Size.Small"/>
                            </MudTooltip>
                        </MudStack>
                    </CellTemplate>
                </TemplateColumn>
            </Columns>
        </MudDataGrid>
    </MudPaper>
</MudContainer>

@code {
    private ObservableCollection<Person> DisplayedPersons { get; set; } = null!;
    private string _searchString = string.Empty;

    private Func<Person, bool> SearchFilter =>
        inPerson =>
            string.IsNullOrWhiteSpace(_searchString) || inPerson.GetSearchString().Contains(_searchString, StringComparison.OrdinalIgnoreCase);

    protected override async Task OnInitializedAsync()
    {
        await base.OnInitializedAsync();
        await ReloadDataAsync();
    }

    private async Task ReloadDataAsync() =>
        await (await PersonsService.GetNonMembersAsync())
            .Match(inSome => DisplayedPersons = new ObservableCollection<Person>(inSome
                .OrderBy(inPerson => inPerson.LastName)
                .ThenBy(inPerson => inPerson.FirstName)),
                () => Snackbar.Add("Aucune année scolaire courante. Une année scolaire en cours doit être enregistrée", Severity.Error));

    private async Task OnAddPersonClick()
    {
        var dialog = await DialogService.ShowAsync<SaveNonMemberDialog>("Ajout d'un non adhérent", new DialogOptions
        {
            CloseOnEscapeKey = true,
            BackdropClick = false
        });
        var dialogResult = await dialog.Result;
        if (!dialogResult.Canceled)
        {
            await ReloadDataAsync();
        }
    }

    private async Task OnPersonEditClick(Person inPerson)
    {
        var theParameters = new DialogParameters
        {
            { nameof(SaveNonMemberDialog.Model), inPerson.Adapt<SaveNonMemberFormModel>() }
        };
        var theDialog = await DialogService.ShowAsync<SaveNonMemberDialog>("Edition d'un non adhérent", theParameters, new DialogOptions
        {
            CloseOnEscapeKey = true,
            BackdropClick = false,
            CloseButton = true,
            FullWidth = true
        });
        var theDialogResult = await theDialog.Result;
        if (theDialogResult is { Canceled: false })
        {
            await ReloadDataAsync();
        }
    }

    private async Task OnPersonDeleteClick(Person inPerson)
    {
        var theDialog = await DialogService.Confirm($"Êtes-vous sur de vouloir supprimer le non adhérent {inPerson.GetFullName()} ?", "Supprimer un non adhérent", "Annuler", "Supprimer");
        var theDialogResult = await theDialog.Result;
        if (theDialogResult is { Canceled: false })
        {
            var result = await PersonsService.DeletePersonAsync(inPerson);
            await result.MatchAsync(async inSuccess =>
            {
                await ReloadDataAsync();
                return inSuccess;
            },
                inFailure =>
                {
                    Snackbar.Add(inFailure.First(), Severity.Error);
                    return Unit.Default;
                }
                );
        }
    }

    private async Task OnPersonRegistrationsClick(Person inPerson)
    {
        if (inPerson.IsAddressMissing())
        {
            Snackbar.Add("Veuillez renseigner une adresse pour ajouter une adhésion", Severity.Error);
            return;
        }

        var theParameters = new DialogParameters
        {
            { nameof(PersonRegistrationsDialog.Person), inPerson }
        };
        var theDialog = await DialogService.ShowAsync<PersonRegistrationsDialog>($"{inPerson.GetFullName()} - Adhésions", theParameters, new DialogOptions
        {
            CloseOnEscapeKey = true,
            BackdropClick = false,
            CloseButton = true,
            FullWidth = true
        });
        await theDialog.Result;
        await ReloadDataAsync();
    }
    
    private async Task OnPersonServiceVariationsClick(Person inPerson)
    {
        var theParameters = new DialogParameters
        {
            { nameof(PersonServiceVariationsDialog.Person), inPerson }
        };
        var theDialog = await DialogService.ShowAsync<PersonServiceVariationsDialog>($"{inPerson.GetFullName()} - Inscriptions", theParameters, new DialogOptions
        {
            CloseOnEscapeKey = true,
            BackdropClick = false,
            CloseButton = true,
            FullWidth = true
        });
        await theDialog.Result;
        await ReloadDataAsync();
    }
}