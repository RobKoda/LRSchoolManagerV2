@using LRSchoolV2.Blazor.Pages.SchoolYears
@using System.Globalization
@using LRSchoolV2.Blazor.Pages.AnnualServices.AnnualServiceVariations
@using LRSchoolV2.Domain.AnnualServices
@using LRSchoolV2.Domain.Common
@using LRSchoolV2.Domain.Persons
@inject SchoolYearsService SchoolYearsService
@inject PersonAnnualServiceVariationsService PersonAnnualServiceVariationsService
@inject AnnualServiceVariationsService AnnualServiceVariationsService
@inject ISnackbar Snackbar
@inject PersonsService PersonsService

@{
#pragma warning disable CS8669
}

@if (Model != null)
{
    <EditForm Model="Model" OnValidSubmit="Submit">
    <DataAnnotationsValidator />
        <MudDialog>
            <DialogContent>
                <MudGrid>
                    <MudItem xs="12">
                        <MudSelect T="SchoolYear?" Label="Année scolaire" @bind-Value="Model.SchoolYear" For="@(() => Model.SchoolYear)">
                            @foreach (var schoolYear in SchoolYears)
                            {
                                <MudSelectItem Value="schoolYear">@schoolYear.StartDate.ToShortDateString() - @schoolYear.EndDate.ToShortDateString()</MudSelectItem>
                            }
                        </MudSelect>
                    </MudItem>
                    <MudItem xs="12">
                        <MudSelect T="AnnualServiceVariation?" Label="Service" @bind-Value="Model.AnnualServiceVariation" For="@(() => Model.AnnualServiceVariation)">
                            @foreach (var annualServiceVariation in AnnualServiceVariations)
                            {
                                <MudSelectItem Value="annualServiceVariation">@annualServiceVariation.GetFullName()</MudSelectItem>
                            }
                        </MudSelect>
                    </MudItem>
                    <MudItem xs="12">
                        <MudNumericField HideSpinButtons="true" Label="Nombre de paiements" @bind-Value="Model.PaymentsCount" For="@(() => Model.PaymentsCount)" Culture="CultureInfo.InvariantCulture"/>
                    </MudItem>
                    <MudItem xs="12">
                        <MudNumericField HideSpinButtons="true" Label="Nombre de paiements consultants" @bind-Value="Model.ConsultantPaymentsCount" For="@(() => Model.ConsultantPaymentsCount)" Culture="CultureInfo.InvariantCulture"/>
                    </MudItem>
                    <MudItem xs="12">
                        <MudSwitch Label="Facturer à : (à cocher uniquement si l'adhérent ou sa personne de contact 1 ne doit pas être le destinataire de la facture)" @bind-Value="BilledPersonShow" Color="Color.Primary"/>
                        @if (BilledPersonShow)
                        {
                            <MudAutocomplete T="Person?" Label="" @bind-Value="Model.BilledPerson" For="@(() => Model.BilledPerson)" ResetValueOnEmptyText="true" Clearable="true"
                                             ToStringFunc="@(inPerson => inPerson?.GetDropdownText() ?? string.Empty)" SearchFunc="SearchContactPerson"/>
                        }
                    </MudItem>
                </MudGrid>
            </DialogContent>
            <DialogActions>
                <MudButton OnClick="@Cancel">Annuler</MudButton>
                <MudButton Color="Color.Primary" ButtonType="ButtonType.Submit">Ok</MudButton>
            </DialogActions>
        </MudDialog>
    </EditForm>
}

@{
#pragma warning restore CS8669
}

@code {

    [CascadingParameter]
    private MudDialogInstance MudDialog { get; set; } = null!;

    [Parameter]
    public SavePersonServiceVariationFormModel? Model { get; set; }

    public IOrderedEnumerable<SchoolYear> SchoolYears { get; set; } = Enumerable.Empty<SchoolYear>().OrderByDescending(inSchoolYear => inSchoolYear.StartDate);
    public IOrderedEnumerable<AnnualServiceVariation> AnnualServiceVariations { get; set; } = Enumerable.Empty<AnnualServiceVariation>()
        .OrderBy(inServiceVariation => inServiceVariation.Name);

    private IOrderedEnumerable<Person> Persons { get; set; } = null!;

    private bool _billedPersonShow;
    private bool BilledPersonShow
    {
        get => _billedPersonShow;
        set
        {
            _billedPersonShow = value;
            if (!value)
            {
                Model!.BilledPerson = null;
            }
        }
    }
    
    protected override async Task OnParametersSetAsync()
    {
        await base.OnParametersSetAsync();
        await ReloadPersons();

        SchoolYears = (await SchoolYearsService.GetSchoolYearsAsync()).OrderByDescending(inSchoolYear => inSchoolYear.StartDate);
        var annualServiceVariations = await AnnualServiceVariationsService.GetCurrentAnnualServiceVariationsAsync();
        await annualServiceVariations.Match(inSome =>
        {
            AnnualServiceVariations = inSome.OrderBy(inServiceVariation => inServiceVariation.GetFullName());
        },
            () => Snackbar.Add("Aucune année scolaire courante. Une année scolaire en cours doit être enregistrée", Severity.Error));

        Model ??= new SavePersonServiceVariationFormModel();

        BilledPersonShow = Model.BilledPerson != null;
        StateHasChanged();
    }

    private async Task Submit() => 
        (await PersonAnnualServiceVariationsService.SavePersonServiceVariationAsync(Model.Adapt<PersonAnnualServiceVariation>()))
        .Match(
            _ => MudDialog.Close(DialogResult.Ok(true)),
            inFailure => Snackbar.Add(inFailure.First(), Severity.Error)
        );

    private void Cancel() => MudDialog.Cancel();

    private async Task ReloadPersons()
    {
        Persons = (await PersonsService.GetPersonsAsync())
            .OrderBy(inPerson => inPerson.LastName).ThenBy(inPerson => inPerson.FirstName);
    }

    private Task<IEnumerable<Person>> SearchContactPerson(string inValue, CancellationToken inCancellationToken)
    {
        var persons = Persons.Where(inPerson => inPerson.Id != Model!.Id);
        return Task.FromResult(
            string.IsNullOrWhiteSpace(inValue) ?
                persons :
                persons.Where(inPerson => inPerson.GetFullName().Contains(inValue, StringComparison.InvariantCultureIgnoreCase))
            );
    }
}

