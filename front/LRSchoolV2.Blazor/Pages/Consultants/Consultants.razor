@page "/Consultants"
@using BlazorDownloadFile
@using Unit = LanguageExt.Unit
@using LRSchoolV2.Blazor.Pages.Consultants.SaveConsultant
@using LRSchoolV2.Domain.Consultants

@inject IDialogService DialogService
@inject IBlazorDownloadFileService DownloadFileService
@inject ISnackbar Snackbar
@inject ConsultantsService ConsultantsService

<MudContainer class="pt-2 mx-1" MaxWidth="MaxWidth.False">
    <MudButton StartIcon="@Icons.Material.Filled.Add" OnClick="@OnAddConsultantClick" Variant="Variant.Filled" Color="Color.Primary">Ajouter</MudButton>

    <MudPaper Class="mt-4">
        <MudDataGrid T="Consultant" Items="DisplayedConsultants" SelectOnRowClick="true" Hover="true" Style="user-select: none;" SortMode="SortMode.None">
            <ToolBarContent>
                <MudText Typo="Typo.h6">Intervenants</MudText>
            </ToolBarContent>
            <Columns>
                <HierarchyColumn T="Consultant"/>
                <PropertyColumn T="Consultant" TProperty="string" Property="inConsultant => inConsultant.LastName" Title="Nom"/>
                <PropertyColumn T="Consultant" TProperty="string" Property="inConsultant => inConsultant.FirstName" Title="Prénom"/>
                <PropertyColumn T="Consultant" TProperty="string" Property="inConsultant => inConsultant.CompanyName" Title="Nom d'entreprise"/>
                <PropertyColumn T="Consultant" TProperty="string" Property="inConsultant => inConsultant.PhoneNumber" Title="Téléphone"/>
                <PropertyColumn T="Consultant" TProperty="string" Property="inConsultant => inConsultant.Email" Title="Email"/>
                <PropertyColumn T="Consultant" TProperty="string" Property="inConsultant => inConsultant.Address.GetAddressFullDisplay()" Title="Adresse"/>
                <TemplateColumn>
                    <CellTemplate>
                        <MudStack Row>
                            <MudTooltip Text="Modèle de facture">
                                @* ReSharper disable once ArrangeRedundantParentheses - Nope*@
                                <MudFileUpload T="IBrowserFile" Accept=".docx" OnFilesChanged="@(inFile => OnUploadInvoiceDocumentClick(inFile, context.Item!))" MaximumFileCount="1" Class="ma-0">
                                    <ActivatorContent>
                                        <MudIconButton HtmlTag="label" Variant="Variant.Filled" Color="Color.Primary" Icon="@Icons.Material.Filled.ReceiptLong" Size="Size.Small"/>
                                    </ActivatorContent>
                                </MudFileUpload>
                            </MudTooltip>
                            <MudTooltip Text="Télécharger modèle de facture">
                                <MudIconButton Variant="Variant.Filled" Color="Color.Primary" Icon="@Icons.Material.Filled.PictureAsPdf" OnClick="@(() => OnConsultantInvoicePDFClick(context.Item!))" Size="Size.Small"/>
                            </MudTooltip>
                            <MudTooltip Text="Modèle de devis">
                                @* ReSharper disable once ArrangeRedundantParentheses - Nope*@
                                <MudFileUpload T="IBrowserFile" Accept=".docx" OnFilesChanged="@(inFile => OnUploadQuoteDocumentClick(inFile, context.Item!))" MaximumFileCount="1" Class="ma-0">
                                    <ActivatorContent>
                                        <MudIconButton HtmlTag="label" Variant="Variant.Filled" Color="Color.Primary" Icon="@Icons.Material.Filled.Receipt" Size="Size.Small"/>
                                    </ActivatorContent>
                                </MudFileUpload>
                            </MudTooltip>
                            <MudTooltip Text="Télécharger modèle de devis">
                                <MudIconButton Variant="Variant.Filled" Color="Color.Primary" Icon="@Icons.Material.Filled.PictureAsPdf" OnClick="@(() => OnConsultantQuotePDFClick(context.Item!))" Size="Size.Small"/>
                            </MudTooltip>
                            <MudTooltip Text="Édition">
                                <MudIconButton Variant="Variant.Filled" Color="Color.Primary" Icon="@Icons.Material.Filled.Edit" OnClick="@(() => OnConsultantEditClick(context.Item!))" Size="Size.Small"/>
                            </MudTooltip>
                            <MudTooltip Text="Suppression">
                                <MudIconButton Variant="Variant.Filled" Color="Color.Primary" Icon="@Icons.Material.Filled.Delete" OnClick="@(() => OnConsultantDeleteClick(context.Item!))" Size="Size.Small"/>
                            </MudTooltip>
                        </MudStack>
                    </CellTemplate>
                </TemplateColumn>
            </Columns>
            <ChildRowContent>
                <div style="user-select: text">
                    <MudText>IBAN : @context.Item.Iban</MudText>
                    <MudText>BIC : @context.Item.BicCode</MudText>
                </div>
            </ChildRowContent>
        </MudDataGrid>
    </MudPaper>
</MudContainer>

@if (_isLoading)
{
    <LoadingSpinner/>
}

@code {
    private ObservableCollection<Consultant> DisplayedConsultants { get; set; } = null!;

    private bool _isLoading;

    protected override async Task OnInitializedAsync()
    {
        await base.OnInitializedAsync();
        await ReloadDataAsync();
    }

    private async Task ReloadDataAsync()
    {
        _isLoading = true;
        DisplayedConsultants = new ObservableCollection<Consultant>(
            (await ConsultantsService.GetConsultantsAsync())
            .OrderBy(inConsultant => inConsultant.LastName)
            .ThenBy(inConsultant => inConsultant.FirstName)
        );
        _isLoading = false;
    }
    
    private async Task OnAddConsultantClick()
    {
        var dialog = await DialogService.ShowAsync<SaveConsultantDialog>("Ajout d'un intervenant", new DialogOptions
        {
            CloseOnEscapeKey = true,
            BackdropClick = false
        });
        var dialogResult = await dialog.Result;
        if (dialogResult is { Canceled: false })
        {
            await ReloadDataAsync();
        }
    }

    private async Task OnConsultantEditClick(Consultant inConsultant)
    {
        var theParameters = new DialogParameters
        {
            { nameof(SaveConsultantDialog.Model), inConsultant.Adapt<SaveConsultantFormModel>() }
        };
        var dialog = await DialogService.ShowAsync<SaveConsultantDialog>("Edition d'un intervenant", theParameters, new DialogOptions
        {
            CloseOnEscapeKey = true,
            BackdropClick = false,
            CloseButton = true,
            FullWidth = true
        });
        var dialogResult = await dialog.Result;
        if (dialogResult is { Canceled: false })
        {
            await ReloadDataAsync();
        }
    }

    private async Task OnConsultantDeleteClick(Consultant inConsultant)
    {
        var dialog = await DialogService.Confirm($"Êtes-vous sur de vouloir supprimer l'intervenant {inConsultant.GetFullName()} ?", "Supprimer un intervenant", "Annuler", "Supprimer");
        var dialogResult = await dialog.Result;
        if (dialogResult is { Canceled: false })
        {
            var result = await ConsultantsService.DeleteConsultantAsync(inConsultant);
            await result.MatchAsync(async inSuccess =>
            {
                await ReloadDataAsync();
                return inSuccess;
            },
                inFailure =>
                {
                    Snackbar.Add(inFailure.First(), Severity.Error);
                    return Unit.Default;
                }
                );
        }
    }
    
    private async Task OnUploadQuoteDocumentClick(InputFileChangeEventArgs  inArgs, Consultant inConsultant)
    {
        _isLoading = true;
        
        var memoryStream = new MemoryStream();
        
        await inArgs.File.OpenReadStream(inArgs.File.Size).CopyToAsync(memoryStream);
        await ConsultantsService.SetConsultantQuoteDocumentAsync(inConsultant.Id, memoryStream.ToArray());
        Snackbar.Add("Le document a été uploadé", Severity.Success);
        
        memoryStream.Close();
        await memoryStream.DisposeAsync();
        
        await ReloadDataAsync();
        
        _isLoading = false;
    }
    
    private async Task OnUploadInvoiceDocumentClick(InputFileChangeEventArgs  inArgs, Consultant inConsultant)
    {
        _isLoading = true;
        
        var memoryStream = new MemoryStream();
        
        await inArgs.File.OpenReadStream(inArgs.File.Size).CopyToAsync(memoryStream);
        await ConsultantsService.SetConsultantInvoiceDocumentAsync(inConsultant.Id, memoryStream.ToArray());
        Snackbar.Add("Le document a été uploadé", Severity.Success);
        
        memoryStream.Close();
        await memoryStream.DisposeAsync();
        
        await ReloadDataAsync();
        
        _isLoading = false;
    }
    
    private async Task OnConsultantQuotePDFClick(Consultant inConsultant)
    {
        var document = await ConsultantsService.GetConsultantQuoteDocumentAsync(inConsultant.Id);
        await document.IfSomeAsync(async inSome => await DownloadFileService.DownloadFile("Modèle Devis.docx", inSome, "application/vnd.openxmlformats-officedocument.wordprocessingml.document"));
        document.IfNone(() => Snackbar.Add("Le modèle de devis n'a pas été trouvé", Severity.Error));
    }
    
    private async Task OnConsultantInvoicePDFClick(Consultant inConsultant)
    {
        var document = await ConsultantsService.GetConsultantInvoiceDocumentAsync(inConsultant.Id);
        await document.IfSomeAsync(async inSome => await DownloadFileService.DownloadFile("Modèle Facture.docx", inSome, "application/vnd.openxmlformats-officedocument.wordprocessingml.document"));
        document.IfNone(() => Snackbar.Add("Le modèle de facture n'a pas été trouvé", Severity.Error));
    }
}